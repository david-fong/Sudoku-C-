
# Things To Do

[Try this?](https://codegolf.stackexchange.com/questions/190727/the-fastest-sudoku-solver)

## Higher Priority

- Implement a solver
  - Interface: reads a file as plaintext, solves (checking for multiple solutions), then asks to write solutions to a new file (user provides empty string to indicate choose suitable name based on input file name)
  - Implementation / representation: Add back the separate seeds array as a function-scoped variable
- Look at ways to use `__builtin_prefetch`.
- Change my C-style casts to C++-style casts.
- Experiment with a different way of giving up: according to when some tile's backtrack counter exceeds some value.
  - Collect and print stats for trial runs of the maximum backtracking operations on any tile in each run before it succeeded or gave up. Print a comparison between those that give up and those that don't.
    - Reason: Look for a pattern / boundary point / transition range.
- Make gen-path a compile-time constant.
  - Rationale: I allowed toggling for educational purposes, but I think doing so reduces chances for compiler optimization. This setting may only be of interest to keen viewers. For anyone else, what performs better is all that really matters.

## Brainstorming Optimizations for Solver::setNextValid

- Change `biasIndex` to be: the next biasIndex that I know I can try (in a way that does not skip possible solutions/completions or go back to the state for a previously rejected traversal branch) if the biasIndex pointing to my current value fails. I'm not sure if this is trivial to do, but it opens up opportunities for optimizations in `Solver::setNextValid`.
  - This would require a change to how I check whether a tile is clear.
    - Make the condition for clearness be whether value is length,
    - (The current contract says that value is undefined if biasIndex is length).
- Use `__builtin_popcount(occmask)` or `__builtin_ctz(!occmask)` to have special case for when the occmask is full:
  - In that case, just backtrack. Don't go through the search loop because we won't find anything in it.
  - What about if length - popcount is 1?
    - Then I could just set the value right away. This would need a c++ builtin for arbiting a bit.
    - This change requires the above `biasIndex` change.

## Lower Priority

- Make non-prompt output text print to cout and to outStream (if outStream is not same as cout).
  - This includes the preamble of parameters that were parsed.
  - Investigate if it is simplest to do this with a macro :P.

## OK cool

An old TODO: Perform benchmarks comparing performance (time and number of operations) with and without seeds.

For 16x16, running 1024 trials, using no seeds was much faster in terms of time, had less than half the number of aborted trials, and took about six times fewer operations. I am shocked. This is amazing (I used to think seeding resulted in slight performance improvements).

## "Failed" Experiment

This didn't end up working.

- Try making traversal order not grid-row-major and see if it improves performance:
  - Hypothesis: Tiles with fewer candidates are like the solution space's dominant bottlenecks. If we were to leave them to the end, we may spend many long advances creating almost-complete solutions that cannot be complete because they violate the bottlenecks (and possibly often in similar ways). If we start with them first, we may be less likely to encounter that problem.
  - Need to give the Tile class an instance field for their og index since that's how we index their group-occupancy vectors and rowBias vectors.
  - Invariant: At the beginning of solution generation, we can filter for all un-seeded tiles and sort them in ascending order of number of remaining candidates. I haven't thought it out 100% yet, but I believe we cannot update this traversal order intermittently (even if we only sort those past the current traversal index) because it could make us miss some outputs or put us in an infinite loop of testing a cycle of outputs. I feel like that's a bit of a bummer, but at this point there are many things I'm not sure of yet, so I'll try to hold that feeling back.

## Bookmarks

```text
https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html
```
